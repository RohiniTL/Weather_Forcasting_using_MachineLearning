# -*- coding: utf-8 -*-
"""weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v5te9flxT7PxutaAezdgmBVAekOemNs_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import os
import plotly.express as px
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder

df=pd.read_csv("weather.csv")
df.shape

df.head()

df.describe()

df.info()

df['date'] = pd.to_datetime(df['date'])

df['weather']=LabelEncoder().fit_transform(df['weather'])

df.info()

import matplotlib.pyplot as plt

plt.figure(figsize=(15, 5))
plt.plot(df['date'], df['precipitation'], label='Precipitation')
plt.plot(df['date'], df['wind'], label='Wind')

plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Precipitation and Wind Over Time')
plt.legend()
plt.grid()

# Set x-axis limits from 2012 to 2032
plt.xlim(pd.Timestamp('2012-01-01'), pd.Timestamp('2032-12-31'))

plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(15, 5))
plt.plot(df['date'], df['temp_min'], label='Min Temperature')
plt.plot(df['date'], df['temp_max'], label='Max Temperature')

plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Minimum and Maximum Temperatures Over Time')
plt.legend()
plt.grid()

# Set x-axis limits from 2012 to 2032
plt.xlim(pd.Timestamp('2012-01-01'), pd.Timestamp('2032-12-31'))

plt.show()

import pandas as pd
import plotly.express as px
import locale

locale.setlocale(locale.LC_TIME, 'en_US.UTF-8')

# Assuming 'date' is a column in your DataFrame
# If it's not already in datetime format, convert it
df['date'] = pd.to_datetime(df['date'])

# Create a new 'month' column
df['month'] = df['date'].dt.month_name()

fig = px.box(df, x='month', y=['temp_min', 'temp_max'], title='Warmest and Coldest Monthly Temperature')
fig.show()

df[["precipitation","temp_max","temp_min","wind"]].corr()

plt.figure(figsize=(12,7))
sns.heatmap(df[["precipitation","temp_max","temp_min","wind"]].corr(),annot=True,cmap='coolwarm');

#preparing data for machine learning
features=["precipitation", "temp_max", "temp_min", "wind"]
X=df[features]
y=df.weather
X_train, X_test, y_train,y_test = train_test_split(X, y,random_state = 0)

xgb = XGBClassifier()
xgb.fit(X_train,y_train)
print("XGB Accuracy:{:.2f}%".format(xgb.score(X_test,y_test)*100))

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy="mean")
X_train = imputer.fit_transform(X_train)

knn = KNeighborsClassifier()
knn.fit(X_train,y_train)
print("KNN Accuracy:{:.2f}%".format(knn.score(X_test,y_test)*100))

ab = AdaBoostClassifier()
ab.fit(X_train, y_train)
print("AB Accuracy:{:.2f}%".format(ab.score(X_test,y_test)*100))

ab.get_params().keys()

parameters = {
    'learning_rate': [1, 2, 3],
    'n_estimators': [100, 500, 1000]
}

cv = GridSearchCV(ab, param_grid=parameters, scoring='f1_micro', n_jobs=-1, verbose=3)
cv.fit(X_train, y_train)

#predicting values from GridSearchCV
y_pred = cv.predict(X_test)

# show classification report on test data
print(classification_report(y_test.values, y_pred, zero_division=1))

input=[[-0.23,-0.23,1,-0.16]]
ot = ab.predict(input)
print("The weather is:")
if(ot==0):
    print("Drizzle")
elif(ot==1):
    print("Fog")
elif(ot==2):
    print("Rain")
elif(ot==3):
    print("snow")
else:
    print("Sun")